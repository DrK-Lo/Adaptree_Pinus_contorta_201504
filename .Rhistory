cat(paste("#### Total number of outliers (loci with p-value below threshold in any one phenotype):", sum(overall.out, na.rm=TRUE)), "\n")
}# end loop
}
a
phentable
colBF <- c()
for (i in 1:length(phen_p)){
colBF[i] <- which(names(f2)==phen_p[i])
}
### unit test
if(!identical(names(f2)[colBF],as.character(phen_p))){print("Error in matching names"); break}
which.cutoffs <- c(1, 4:8)
phentable <- phentable.perc <- data.frame(phen_names)
### for each cutoff,
f3 <- f2
for (i in which.cutoffs){
p.cutoff <- round(cos[1,i],3)
cutoff <- names(cos[i])
### convert bF columns to T/F for outliers
f3[,colBF] <- f2[,colBF] < p.cutoff   # PVALUES LESS THAN CUTOFF
#head(f3[,colBF])
overall.out <- rowSums(f3[,colBF])>0
cat("\n")
### number of outliers in each environment
numOutliers <-  as.numeric(unlist(colSums(f3[,colBF], na.rm=TRUE)))
perc.outliers <- numOutliers/sum(numOutliers)
#print(numOutliers)
phentable <- data.frame(phentable, numOutliers)
phentable.perc <- data.frame(phentable.perc, perc.outliers)
colnames(phentable)[ncol(phentable)] <- paste("numOutliers", cutoff, sep=".")
colnames(phentable.perc)[ncol(phentable)] <- paste("percOfOutliers", cutoff, sep=".")
if (i >= 4){
cat(paste ("### Results for", cutoff, "percentile, which corresponds to a p-value of", p.cutoff, "..."))
cat("\n")
cat(paste("#### Total number of outliers (loci with p-value below threshold in any one phenotype):", sum(overall.out, na.rm=TRUE)), "\n")
}# end loop
}
phentable
which.cutoffs <- c(1, 4:8)
phentable <- phentable.perc <- data.frame(phen_names)
### for each cutoff,
f3 <- f2
for (i in which.cutoffs){
p.cutoff <- cos[1,i]
cutoff <- names(cos[i])
### convert bF columns to T/F for outliers
f3[,colBF] <- f2[,colBF] < p.cutoff   # PVALUES LESS THAN CUTOFF
#head(f3[,colBF])
overall.out <- rowSums(f3[,colBF])>0
cat("\n")
### number of outliers in each environment
numOutliers <-  as.numeric(unlist(colSums(f3[,colBF], na.rm=TRUE)))
perc.outliers <- numOutliers/sum(numOutliers)
#print(numOutliers)
phentable <- data.frame(phentable, numOutliers)
phentable.perc <- data.frame(phentable.perc, perc.outliers)
colnames(phentable)[ncol(phentable)] <- paste("numOutliers", cutoff, sep=".")
colnames(phentable.perc)[ncol(phentable)] <- paste("percOfOutliers", cutoff, sep=".")
if (i >= 4){
cat(paste ("### Results for", cutoff, "percentile, which corresponds to a log10 p-value of", log10(p.cutoff), "..."))
cat("\n")
cat(paste("#### Total number of outliers (loci with p-value below threshold in any one phenotype):", sum(overall.out, na.rm=TRUE)), "\n")
} #end if
}# end loop
phentable[,2:ncol(phentable)] <- round(phentable[,2:ncol(phentable)],0)
phentable
dat <- as.matrix(t(phentable.perc[2:ncol(phentable.perc)]))
dat
phentable[,2:ncol(phentable)] <- round(phentable[,2:ncol(phentable)],0)
phentable.perc
rownames(phentable.perc) <- phen_names
dat <- as.matrix(t(phentable.perc[2:ncol(phentable.perc)]))
dat
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=names(cos)[which.cutoffs],
ylim=c(0,0.5),
xlab="", xaxt="n")
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=names(cos)[which.cutoffs],
ylim=c(0,1),
xlab="", xaxt="n")
text(a[4,]+0.5, par("usr")[3]-0.03,
srt = 90, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
par(mar=c(8,4,1,1))
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=names(cos)[which.cutoffs],
ylim=c(0,1),
xlab="", xaxt="n")
text(a[4,]+0.5, par("usr")[3]-0.03,
srt = 90, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
par(mar=c(10,4,1,1))
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=names(cos)[which.cutoffs],
ylim=c(0,1),
xlab="", xaxt="n")
text(a[4,]+0.5, par("usr")[3]-0.03,
srt = 90, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
levels(f2$X_annotation)
new.annot <- as.character(unlist(f2$X_annotation))
new.annot[grep("nonsyn", f2$X_annotation)] <- "nonsyn"
new.annot <- as.factor(new.annot)
levels(new.annot)
options(warn = -1)
min.p <- apply(f2[,colBF], 1, min, na.rm=TRUE)
hist(min.p)
min.p[is.infinite(min.p)]<-NA
get.prop.newannot <- function(V, ind, rowname=NULL){
a<- tapply(V[ind], new.annot[ind], length)
a2<- data.frame(t(a/sum(a, na.rm=TRUE)))
rownames(a2) <- rowname
a2
}
enrich.new.annot <- data.frame(cutoff="All", get.prop.newannot(min.p, TRUE))
enrich.new.annot
cutoff2 <- as.numeric(cos[which.cutoffs[-1]])
cutoff2names <- names(cos[which.cutoffs[-1]])
n2 <- data.frame(cutoff=cutoff2names[i], get.prop.newannot(min.p, min.p<=cutoff2[i]) )
print(length(n2))
enrich.new.annot<- merge(enrich.new.annot, n2, all.x=TRUE, all.y=TRUE)
enrich.new.annot <- data.frame(cutoff="All", get.prop.newannot(min.p, TRUE))
cutoff2 <- as.numeric(cos[which.cutoffs[-1]])
cutoff2names <- names(cos[which.cutoffs[-1]])
for (i in 1:length(cutoff2)){
n2 <- data.frame(cutoff=cutoff2names[i], get.prop.newannot(min.p, min.p<=cutoff2[i]) )
print(length(n2))
enrich.new.annot<- merge(enrich.new.annot, n2, all.x=TRUE, all.y=TRUE)
}
enrich.new.annot
rownames(enrich.new.annot) <- enrich.new.annot[,1]
dat <- as.matrix(enrich.new.annot[,-1]) #removing the names
rm <- which(colnames(dat) %in% c("X3primeFLANK", "X5primeFLANK", "HAS_INDEL", "mismatch_altref", "multi.allelic", "unk_adj", "unk_flank"))
dat <- dat[,-rm]
par(mar=c(6,4,1,1))
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=rownames(enrich.new.annot),
ylim=c(0,0.75), xlim=c(0,130),
xlab="", xaxt="n",
args.legend=list(x=20,y=0.6),
main = )
text(a[4,], par("usr")[3]-0.03,
srt = 60, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=rownames(enrich.new.annot),
ylim=c(0,0.75),# xlim=c(0,130),
xlab="", xaxt="n",
args.legend=list(x=20,y=0.6),
main = )
text(a[4,], par("usr")[3]-0.03,
srt = 60, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
levels(f2$noncode_in_covar)
get.prop.noncod <- function(V, ind){
a<- tapply(V[ind], f2$noncode_in_covar[ind], length)
as.numeric((a/sum(a, na.rm=TRUE))[1])
}
enrich.noncod <- get.prop.noncod(min.p, TRUE)
for (i in 1:length(cutoff2)){
enrich.noncod <- c(enrich.noncod, get.prop.noncod(min.p, min.p<=cutoff2[i]) )
}
names(enrich.noncod) <- c("All", cutoff2names)
enrich.noncod
low <- min(min.p, na.rm=TRUE)
high <- max(min.p, na.rm=TRUE)
levels(f2$noncode_in_covar)
low
high
br <- seq(low-1e-17, high+0.01, by=0.0001)
par(mfcol=c(3,1), mar=c(4,4,1,1), cex=1.2, las=1)
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", xlim=c(-1,5), main="", xlab="Minimum p-value across phenotypes")
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", xlim=c(0,0.5), main="", xlab="Minimum p-value across phenotypes")
hist(max.BF[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
par(mfcol=c(3,1), mar=c(4,4,1,1), cex=1.2, las=1)
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", xlim=c(0,0.5), main="", xlab="Minimum p-value across phenotypes")
hist(min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(0, 0.01), freq=FALSE, ylim=c(0,0.004),  main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(0, 0.01), freq=FALSE, ylim=c(0,0.01),  main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(0, 0.01), freq=FALSE,
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
log.min.p <- log10(minp)
log.min.p <- log10(min.p)
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", main="", xlab="Minimum log10 p-value across phenotypes")
log.min.p <- log10(min.p)
low <- min(log.min.p, na.rm=TRUE)
high <- max(log.min.p, na.rm=TRUE)
low
high
br <- seq(-17, 0, by=0.01)
par(mfcol=c(3,1), mar=c(4,4,1,1), cex=1.2, las=1)
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", main="", xlab="Minimum log10 p-value across phenotypes")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -5), freq=FALSE,
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -5), freq=FALSE,
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_co var=="no"], breaks=br, xlim=c(-17, -5),
hist(log.min.p[f2$noncode_in_co var=="no"], breaks=br, xlim=c(-17, -5),
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -5),
freq=FALSE, ylim=c(0,0.1),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -5),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -5),
freq=FALSE, ylim=c(0,0.001),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -2),
freq=FALSE, ylim=c(0,0.001),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(max.BF[f2$noncode_in_covar=="no"], breaks=br, xlim=c(5, high), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Max log10(BF) across environments", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -2),
freq=FALSE, ylim=c(0,0.001),
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -2),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -2),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(max.BF[f2$noncode_in_covar=="no"], breaks=br, xlim=c(5, high), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Max log10(BF) across environments", col="grey")
br <- seq(-17, 0, by=0.1)
par(mfcol=c(3,1), mar=c(4,4,1,1), cex=1.2, las=1)
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", main="", xlab="Minimum log10 p-value across phenotypes")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-17, -2),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(max.BF[f2$noncode_in_covar=="no"], breaks=br, xlim=c(5, high), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Max log10(BF) across environments", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-5, high), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-5, high), freq=FALSE, ylim=c(0,0.001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-5, high), freq=FALSE, ylim=c(0,0.01),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-5, low), freq=FALSE, ylim=c(0,0.01),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(low,-5), freq=FALSE, ylim=c(0,0.01),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(low,-5), freq=FALSE, ylim=c(0,0.001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(low,-5), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.5))
legend(20,0.0001, c("Noncoding in covmat", "Not in covmat"), fill=c(rgb(0,1,0,0.5),"grey" ), bty="n")
legend(-16,0.0001, c("Noncoding in covmat", "Not in covmat"), fill=c(rgb(0,1,0,0.5),"grey" ), bty="n")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, freq=FALSE, col="darkgrey", main="", xlab="Minimum log10 p-value across phenotypes", xlim=c(0,-17))
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-2, -17),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum log10 p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(low,-5), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-4, low), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.5))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-2, -17),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum log10 p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-3, -17),
freq=FALSE, ylim=c(0,0.01),
main="", xlab="Minimum log10 p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-3, -17),
freq=FALSE, ylim=c(0,0.005),
main="", xlab="Minimum log10 p-value across phenotypes", col="darkgrey")
hist(log.min.p[f2$noncode_in_covar=="in_covar"], breaks=br, freq=FALSE, add=TRUE, col=rgb(0,1,0,0.2))
hist(log.min.p[f2$noncode_in_covar=="no"], breaks=br, xlim=c(-4, low), freq=FALSE, ylim=c(0,0.0001),  main="", xlab="Minimum log10 p-value across phenotypes", col="grey")
~/setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_src/phenotypes")
setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_src/phenotypes")
setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_data/phenotypes")
source("PCACodeForKatie.R")
if(!('xlsx' %in% installed.packages()){install.package("xlsx")}
if(!('xlsx' %in% installed.packages())){install.package("xlsx")}
if(!('xlsx' %in% installed.packages())){install.packages("xlsx")}
setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_data/phenotypes")
source("PCACodeForKatie.R")
all = read.table("PinePhenotypicData.txt", header=T, sep="\t")
all = all[all$ExperimentalClimate == 'MAT06',]
a=read.csv('traits-1.csv')
b=as.vector(a$Trait)
b
newnames=as.vector(a$New_name)
setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_data/phenotypes")
source("PCACodeForKatie.R")
newnames
newnames=as.vector(a$New_Name)
source("PCACodeForKatie.R")
allf = all[,c(5,10,58,60,62)]
sum(abs(allf[,3]-50), na.rm=T)
sum(abs(allf[,4]-50), na.rm=T)
sum(abs(allf[,5]-50), na.rm=T)
allf = all[,c(5,10,65,67,69)]
sum(abs(allf[,3]-50), na.rm=T)
sum(abs(allf[,4]-50), na.rm=T)
sum(abs(allf[,5]-50), na.rm=T)
allf = all[,c(5,10,72,74,76)]
sum(abs(allf[,3]-50), na.rm=T)
sum(abs(allf[,4]-50), na.rm=T)
sum(abs(allf[,5]-50), na.rm=T)
#end
y = all[,c(5,10,which(names(all) %in% b))]
x = apply(all[,c(58,60)], 1, mean)
y = cbind(y,"Fall cold injury"=x)
x = apply(all[,c(65,67)], 1, mean)
y = cbind(y,"Winter cold injury"=x)
x = apply(all[,c(72,74)], 1, mean)
y = cbind(y,"Spring cold injury"=x)
names(y)[-c(1:2)] = newnames
#newtraits
y$"root wt/shoot wt" = y$Root_weight / y$Shoot_weight
y$"root wt + shoot wt" = y$Root_weight + y$Shoot_weight
ls()
install.packages("HSAUR2")
dim(all)
dim(allf)
dim(y)
x
dim(x)
length(x)
dim(y)
head(y)
source("PCACodeForKatie.R")
ls()
str(pc)
barplot(pc$sdev, ylab="Standard Deviation", names.arg = 1:17, xlab="PC axis")
loadings <- pc$rotation
dim(loadings)
par(mfcol=c(2,2), mar=c(4,4,1,1))
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=0, bty="l", xlim=c(-0.5,0.4))
text(loadings[,1], loadings[,2], env.clust$enviAbb, cex=0.7)
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=0, bty="l", xlim=c(-0.5,0.4))
loadings
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=0, bty="l")
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=1, bty="l")
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=0, bty="l")
text(loadings[,1], loadings[,2], rowNames(loadings), cex=0.7)
text(loadings[,1], loadings[,2], rownames(loadings), cex=0.7)
plot(loadings[,1], loadings[,3], xlab="PC1", ylab="PC3", col=0, bty="l", xlim=c(-0.5,0.4))
text(loadings[,1], loadings[,3], env.clust$enviAbb, cex=0.7)
par(mfcol=c(2,2), mar=c(4,4,1,1))
### Left column
plot(loadings[,1], loadings[,2], xlab="PC1", ylab="PC2", col=0, bty="l")
text(loadings[,1], loadings[,2], rownames(loadings), cex=0.7)
plot(loadings[,1], loadings[,3], xlab="PC1", ylab="PC3", col=0, bty="l", xlim=c(-0.5,0.4))
text(loadings[,1], loadings[,3], rownames(loadings), cex=0.7)
### Right column
plot(loadings[,1], loadings[,4], xlab="PC1", ylab="PC4", col=0, bty="l", xlim=c(-0.5,0.4))
text(loadings[,1], loadings[,4], rownames(loadings), cex=0.7)
plot(loadings[,1], loadings[,5], xlab="PC1", ylab="PC5", col=0, bty="l", xlim=c(-0.5,0.4))
text(loadings[,1], loadings[,5], rownames(loadings), cex=0.7)
par(mfrow=c(1,1), mar=c(4,0,0,0))
makePCplot <- function(pc){
plot(loadings[,pc], (rank(loadings[,pc])), bty="l", yaxt="n", ylab="", xlab=paste("PC", pc), col=0, xlim=c(min(loadings[,pc])*1.5, max(loadings[,pc])*1.5))
text(loadings[,pc], (rank(loadings[,pc])), env.clust$enviAbb)
makePCplot <- function(pc){
plot(loadings[,pc], (rank(loadings[,pc])), bty="l", yaxt="n", ylab="", xlab=paste("PC", pc), col=0, xlim=c(min(loadings[,pc])*1.5, max(loadings[,pc])*1.5))
text(loadings[,pc], (rank(loadings[,pc])), rownames(loadings))
}
for (i in 1:5){
makePCplot(i)
}
}
par(mfrow=c(1,1), mar=c(4,0,0,0))
makePCplot <- function(pc){
plot(loadings[,pc], (rank(loadings[,pc])), bty="l", yaxt="n", ylab="", xlab=paste("PC", pc), col=0, xlim=c(min(loadings[,pc])*1.5, max(loadings[,pc])*1.5))
text(loadings[,pc], (rank(loadings[,pc])), rownames(loadings))
}
for (i in 1:5){
makePCplot(i)
}
par(mfrow=c(1,1), mar=c(4,0,0,0))
makePCplot <- function(pc){
plot(loadings[,pc], (rank(loadings[,pc])), bty="l", yaxt="n", ylab="", xlab=paste("PC", pc), col=0, xlim=c(min(loadings[,pc])*3, max(loadings[,pc])*1.5))
text(loadings[,pc], (rank(loadings[,pc])), rownames(loadings))
}
for (i in 1:5){
makePCplot(i)
}
names(f2)
phen_p <- c(paste('PC',1:16, "_p", sep=""))
phen_slope <- c(paste(phen, "_snp_effect", sep=""), "root_wt__shoot_wt_snp_effect_1")
phen_p <- c(paste('PC',1:16, "_p", sep=""))
phen_slope <- c(paste('PC',1:16, "_snp_effect", sep=""))
colBF <- c()
for (i in 1:length(phen_p)){
colBF[i] <- which(names(f2)==phen_p[i])
}
if(!identical(names(f2)[colBF],as.character(phen_p))){print("Error in matching names"); break}
colBF
names(f2)[colBF]
which.cutoffs <- c(1, 4:8)
phentable <- phentable.perc <- data.frame(phen_names)
f3 <- f2
for (i in which.cutoffs){
p.cutoff <- cos[1,i]
cutoff <- names(cos[i])
### convert bF columns to T/F for outliers
f3[,colBF] <- f2[,colBF] < p.cutoff   # PVALUES LESS THAN CUTOFF
#head(f3[,colBF])
overall.out <- rowSums(f3[,colBF])>0
cat("\n")
### number of outliers in each environment
numOutliers <-  as.numeric(unlist(colSums(f3[,colBF], na.rm=TRUE)))
perc.outliers <- numOutliers/sum(numOutliers)
#print(numOutliers)
phentable <- data.frame(phentable, numOutliers)
phentable.perc <- data.frame(phentable.perc, perc.outliers)
colnames(phentable)[ncol(phentable)] <- paste("numOutliers", cutoff, sep=".")
colnames(phentable.perc)[ncol(phentable)] <- paste("percOfOutliers", cutoff, sep=".")
if (i >= 4){
cat(paste ("### Results for", cutoff, "percentile, which corresponds to a p-value of", p.cutoff, "..."))
cat("\n")
cat(paste("#### Total number of outliers (loci with p-value below threshold in any one phenotype):", sum(overall.out, na.rm=TRUE)), "\n")
} #end if
}# end loop
phen_names
phen_names <- c(paste('PC',1:16,  sep=""))
phentable <- phentable.perc <- data.frame(phen_names)
phentable
f3 <- f2
for (i in which.cutoffs){
p.cutoff <- cos[1,i]
cutoff <- names(cos[i])
### convert bF columns to T/F for outliers
f3[,colBF] <- f2[,colBF] < p.cutoff   # PVALUES LESS THAN CUTOFF
#head(f3[,colBF])
overall.out <- rowSums(f3[,colBF])>0
cat("\n")
### number of outliers in each environment
numOutliers <-  as.numeric(unlist(colSums(f3[,colBF], na.rm=TRUE)))
perc.outliers <- numOutliers/sum(numOutliers)
#print(numOutliers)
phentable <- data.frame(phentable, numOutliers)
phentable.perc <- data.frame(phentable.perc, perc.outliers)
colnames(phentable)[ncol(phentable)] <- paste("numOutliers", cutoff, sep=".")
colnames(phentable.perc)[ncol(phentable)] <- paste("percOfOutliers", cutoff, sep=".")
if (i >= 4){
cat(paste ("### Results for", cutoff, "percentile, which corresponds to a p-value of", p.cutoff, "..."))
cat("\n")
cat(paste("#### Total number of outliers (loci with p-value below threshold in any one phenotype):", sum(overall.out, na.rm=TRUE)), "\n")
} #end if
}# end loop
cat("\n")
cat("### Number of outliers based on different cutoffs")
### output number of outliers for each environment
cat("\n")
cat(paste ("#### The number of outliers in each phenotype",  "\n"))
phentable[,2:ncol(phentable)] <- round(phentable[,2:ncol(phentable)],0)
print(xtable(phentable), type="html", digits=0)
#print(xtable(envitable.perc), type="html")
rownames(phentable.perc) <- phen_names
dat <- as.matrix(t(phentable.perc[2:ncol(phentable.perc)]))
par(mar=c(10,4,1,1))
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=names(cos)[which.cutoffs],
ylim=c(0,1),
xlab="", xaxt="n")
text(a[4,]+0.5, par("usr")[3]-0.03,
srt = 90, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
levels(f2$X_annotation)
### Make a new annotation category
new.annot <- as.character(unlist(f2$X_annotation))
new.annot[grep("nonsyn", f2$X_annotation)] <- "nonsyn"
new.annot <- as.factor(new.annot)
levels(new.annot)
### Calculate the max(BF) for a locus across all environments
options(warn = -1)
min.p <- apply(f2[,colBF], 1, min, na.rm=TRUE)
min.p[is.infinite(min.p)]<-NA
get.prop.newannot <- function(V, ind, rowname=NULL){
a<- tapply(V[ind], new.annot[ind], length)
a2<- data.frame(t(a/sum(a, na.rm=TRUE)))
rownames(a2) <- rowname
a2
}
enrich.new.annot <- data.frame(cutoff="All", get.prop.newannot(min.p, TRUE))
cutoff2 <- as.numeric(cos[which.cutoffs[-1]])
cutoff2names <- names(cos[which.cutoffs[-1]])
for (i in 1:length(cutoff2)){
n2 <- data.frame(cutoff=cutoff2names[i], get.prop.newannot(min.p, min.p<=cutoff2[i]) )
print(length(n2))
enrich.new.annot<- merge(enrich.new.annot, n2, all.x=TRUE, all.y=TRUE)
}
rownames(enrich.new.annot) <- enrich.new.annot[,1]
dat <- as.matrix(enrich.new.annot[,-1]) #removing the names
rm <- which(colnames(dat) %in% c("X3primeFLANK", "X5primeFLANK", "HAS_INDEL", "mismatch_altref", "multi.allelic", "unk_adj", "unk_flank"))
dat <- dat[,-rm]
par(mar=c(6,4,1,1))
a<- barplot(dat, beside=TRUE,
ylab="Proportion of total outliers",
legend.text=rownames(enrich.new.annot),
ylim=c(0,0.75),# xlim=c(0,130),
xlab="", xaxt="n",
args.legend=list(x=20,y=0.6),
main = )
text(a[4,], par("usr")[3]-0.03,
srt = 60, adj= 1, xpd = TRUE,
labels = paste(colnames(dat)), cex=0.8)
rm(list=ls()[-which(ls()=="f2")])
ls()
rmarkdown::render("driverProcessBayenvResults4VennResultsv3_TASSEL_PCA.Rmd")
setwd("/Users/katie/Desktop/current projects/1-AdaptreeData/2015_POST_FILTERING/pine_src") #on Mac Pro
rmarkdown::render("driverProcessBayenvResults4VennResultsv3_TASSEL_PCA.Rmd")
